version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vonix-app
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      TURSO_DATABASE_URL: ${TURSO_DATABASE_URL}
      TURSO_AUTH_TOKEN: ${TURSO_AUTH_TOKEN}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      DISCORD_GUILD_ID: ${DISCORD_GUILD_ID}
      MINECRAFT_API_KEY: ${MINECRAFT_API_KEY}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - vonix-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: vonix-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vonix-network

  # Discord bot service (optional)
  discord-bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    container_name: vonix-discord-bot
    environment:
      NODE_ENV: production
      TURSO_DATABASE_URL: ${TURSO_DATABASE_URL}
      TURSO_AUTH_TOKEN: ${TURSO_AUTH_TOKEN}
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      DISCORD_GUILD_ID: ${DISCORD_GUILD_ID}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - bot
    networks:
      - vonix-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: vonix-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - nginx
    networks:
      - vonix-network

volumes:
  redis_data:
    driver: local

networks:
  vonix-network:
    driver: bridge
